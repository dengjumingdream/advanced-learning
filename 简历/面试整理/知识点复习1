一、整理
    1.RabbitMQ
    2.多线程
    3.算法
    4.SpringBoot
    5.SpringCloud

二、RabbitMQ
    1.重要构成
        ConnectionFactory 代码中使用，应用程序和RabbitMQ建立连接的管理器。
        Channel 管道 进行消息推送的管道
        RoutingKey 路由键
        Exchange交换机 接收和推送消息
        Queue消息队列 存储消息（磁盘或者内存中）
        BingdingKey 绑定键 

    2.具体流程
        开发流程：
            先将对应规则配置好
            然后接收客户端信息，推送到RabbitMQ进行信息存储，再消费信息
        客户端 -> 发送信息到RabbitMQ（通过RoutingKey找到 交换机 ，然后通过BingingKey将消息存储到队列中 ）

    3.工作模式（消息队列类型）
        - 一对一，简单模式
        - 一对多，一个生产者，一个队列，一个消费者
        - 一对多，一个生产者，多个队列，每个队列都有一个消费者
        - 路由模式，交换机，匹配规则进行匹配
        - Topic Change模式，（通配符匹配）


三、多线程（线程池）
    1.设置参数 
        核心线程数
        最大线程数
        线程等待时间
        线程等待时间单位
        用于保存任务的队列
        创建线程的工厂类
        线程池的饱和策略
    2.具体组成
        ThreadPool（线程池管理器）: 用于管理线程池，例如：创建线程池、删除线程池和添加新任务
        WorkThread（工作线程）: 线程池中的线程，在没有任务的时候出于等待状态，可以循环的执行任务
        Task（任务接口）：每个任务必须实现的接口。
        TaskQueue（任务队列）：用于存放没有处理的任务。
        
    3.工作队列
        SynchronousQueue同步移交队列：队列长度为0，来了直接移交
        链表队列：无界队列，任务越来越多时，可能OOM，内存泄露
        有界队列：队列长度受限，当队列满了就需要创建多余的线程来执行任务

    4.拒绝策略
        AbortPolicy：中断抛出异常
        Discard：默默抛弃
        DiscardOldest：抛弃队列中最久的
        CallerRunsPolicy：让提交了任务的线程去执行任务

    5.线程池的关闭
        shutDownNow():强制中断所有任务，被中断的任务，会返回中断列表
        shutDown():平滑中断，未执行完的执行完成，后边来的执行拒绝策略
        isTerminated():

    6.提供的几种线程池
        单线程池：长度为1，任务被顺序执行
        定时任务线程池：周期性执行任务
        newFixedThreadPool：指定线程个数，超过进入等待
    7.Callable有返回值，runable没有

四、算法
    1.链表
        - 反转链表：数据结构，堆栈先进后出
        - 指定位置反转链表：链表截断，然后反转，然后拼接
        - 合并两个链表：先if里头判断，然后进行拼接
        - 合并K个有序链表：搞成数组，再进行合并
        - 判断链表是否有环：快慢指针，如果慢指针到末尾了就没有了
        - 获取链表环入口：快慢指针（先相遇，然后以相同的速度继续运行，相同时就是入口），使用HashMap记录节点
        - 链表中倒数最后K个节点：放到数组里头，最后再构建；先计算总长度，然后Len - k = 移动的
        - 删除链表中的第N个节点：节点长度，Len - n = 移动节点；将后节点移动到前节点就好了
        - 两个链表的第一个公共节点：HashMap可以；
        - 链表相加：标识进位，堆栈，慢慢搞
        - 单链表的排序：转换为数组，先快拍，然后构建；归并排序
    2.二分查找
    3.排序方式
        冒泡排序：两两进行对比，然后换位。
        归并排序：先从中间分，然后进行递归，然后合并。
        快速排序：选择最小的然后，放最前头去。