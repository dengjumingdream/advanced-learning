<!--
 * @Author: MrDeng
 * @Date: 2022-08-08 09:45:55
 * @LastEditTime: 2022-08-08 19:22:20
 * @LastEditors: dengjuming
 * @Description: Linux服务器高并发Tcp调优
 * @FilePath: /advanced-learning/spring/GM平台/TCP高并发性能调优
-->
一、关键点
    1.Linux下文件句柄数
        - 单进程下最大打开文件限制
    2.内核TCP参数方面
        - 端口占用问题，Time_wait设置
    3.IO事件分配机制

二、Linux下文件句柄数
    1.iptables
      - 修改单进程可打开最大文件数量：ulimit –n 65535
        - Operationnotpermitted操作失败
        - 修改Linux系统对用户的关于打开文件数的软限制和硬限制

三、内核TCP参数方面
    1.TCP端口占用问题
      - 问题：Linux系统下，TCP连接端口后，会以time_wait状态保留一段时间，然后才会释放端口；高并发情况下会占用大量端口资源和服务器资源；
      - 优化：修改TCP的内核参数，及时清理Time_wait状态端口；
    2.解决方式
      - 编辑配置文件:/etc/sysctl.conf
        # vim /etc/sysctl.conf
        net.ipv4.tcp_syncookies= 1
        net.ipv4.tcp_tw_reuse= 1
        net.ipv4.tcp_tw_recycle= 1
        net.ipv4.tcp_fin_timeout= 30
      - 执行命令，让配置生效
        sysctl-p
      - 参数含义
        net.ipv4.tcp_syncookies= 1
        #表示开启SYNCookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；
        net.ipv4.tcp_tw_reuse= 1
        #表示开启重用。允许将TIME-WAITsockets重新用于新的TCP连接，默认为0，表示关闭；
        net.ipv4.tcp_tw_recycle= 1
        #表示开启TCP连接中TIME-WAITsockets的快速回收，默认为0，表示关闭；
        net.ipv4.tcp_fin_timeout
        #修改系統默认的TIMEOUT 时间。
    3.学习完善：其他配置参数学习 （TODO）

四、IO事件分配机制
    1.确认应用程序是否使用了合适的网络I/O技术和I/O事件分派机制
    2.IO技术分类：
      - 同步I/O
        - 不可取
      - 非阻塞式同步I/O
        - select()，poll()，epoll
        - select()，有并发连接数限制（一般在1024以内）
        - poll()，采用轮询机制，并发过高，运行效率过低
        - epoll: 可以
      - 异步I/O
        - AIO: 可以
